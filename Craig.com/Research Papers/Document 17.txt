b'The ND-Tree: A Dynamic Indexing Technique for\nMultidimensional Non-ordered Discrete Data Spaces\nGang QianyQiang ZhuzQiang XueySakti Pramaniky\nyDepartment of Computer Science and Engineering\nMichigan State University, East Lansing, MI 48824, USA\nfqiangang,xueqiang,pramanik g@cse.msu.edu\nzDepartment of Computer and Information Science\nThe University of Michigan - Dearborn, Dearborn, MI 48128, USA\nqzhu@umich.edu\nAbstract\nSimilarity searches in multidimensional Non-ordered Discrete Data Spaces (NDDS) are\nbecoming increasingly important for applica-\ntion areas such as genome sequence databases.\nExisting indexing methods developed for\nmultidimensional (ordered) Continuous DataSpaces (CDS) such as R-tree cannot be di-\nrectly applied to an NDDS. This is because\nsome essential geometric concepts/propertiessuch as the minimum bounding region and the\narea of a region in a CDS are no longer valid in\nan NDDS. On the other hand, indexing meth-ods based on metric spaces such as M-tree are\ntoo general to e\x0bectively utilize the data dis-\ntribution characteristics in an NDDS. There-fore, their retrieval performance is not opti-\nmized. To support e\x0ecient similarity searches\nin an NDDS, we propose a new dynamic in-\ndexing technique, called the ND-tree. The key\nidea is to extend the relevant geometric con-cepts as well as some indexing strategies used\nin CDSs to NDDSs. E\x0ecient algorithms for\nND-tree construction are presented. Our ex-perimental results on synthetic and genomic\nsequence data demonstrate that the perfor-\nmance of the ND-tree is signi\x0ccantly betterthan that of the linear scan and M-tree in high\ndimensional NDDSs.\nPermission to copy without fee all or part of this material is\ngranted provided that the copies are not made or distributed fordirect commercial advantage, the VLDB copyright notice andthe title of the publication and its date appear, and notice is\ngiven that copying is by permission of the Very Large Data Base\nEndowment. To copy otherwise, or to republish, requires a feeand/or special permission from the Endowment.\nProceedings of the 29th VLDB Conference,\nBerlin, Germany, 20031 Introduction\nSimilarity searches in multidimensional Non-ordered\nDiscrete Data Spaces (NDDS) are becoming increas-ingly important. For example, in genome sequence\ndatabases, sequences with alphabet A=fa; g; t; c g\nare broken into substrings (also called intervals)of some \x0cxed-length dfor similarity searches [18].\nEach interval can be considered as a vector in a\nd-dimensional data space. For example, interval\n\\aggcggtgatctgggccaatactga " is a vector in the 25-\ndimensional data space, where the i-th character is\na letter chosen from alphabet Ain the i-th dimension.\nThe main characteristic of such a data space is that the\ndata values in each dimension are discrete and have no\nordering. Other examples of non-ordered discrete val-\nues in a dimension of an NDDS are some discrete data\ntypes such as sex, complexion, profession and user-de\x0cned enumerated types. The databases that require\nsearching information in an NDDS can be very large\n(e.g., the well-known genome sequence database, Gen-Bank, contains over 24 GB genomic data). To support\ne\x0ecient similarity searches in such databases, robust\nindexing techniques are needed.\nAs we know, many multidimensional indexing\nmethods have been proposed for Continuous Data\nSpaces (CDS), where data values in each dimension are\ncontinuous and can be ordered along an axis. Thesetechniques can be classi\x0ced into two categories: data\npartitioning-based and space partitioning-based. The\ntechniques in the \x0crst category such as R-tree [15],R*-tree [3], SS-tree [24], SR-tree [17] and X-tree [2]\ndivide the data space according to the distribution of\ndata points in the tree. The techniques in the secondcategory such as K-D-B tree [21] and LSDh-tree [16],\non the other hand, divide the data space according\nto prede\x0cned splitting points regardless of data clus-ters. The Hybrid-tree that incorporates the strengths'
b'of indexing methods in both categories was proposed in\n[7]. However, all the above techniques rely on a crucial\nproperty of a CDS; that is, the data values in each di-mension can be ordered and labeled on an axis. Some\nessential geometric concepts such as rectangle, sphere,\narea of a region, left corner, etc. are no longer valid in\nan NDDS, where data values in each dimension cannot\neven be labeled on an (ordered) axis. Hence the abovetechniques cannot be directly applied to an NDDS.\nIf the alphabet for every dimension in an NDDS is\nthe same, a vector in such space can be considered as\na string over the alphabet. In this case, traditional\nstring indexing methods, such as Tries [11], Pre\x0cx B-tree [1] and String B-tree [13], can be utilized. How-\never, most of these string indexing methods like Pre-\n\x0cx B-trees and String B-trees were designed for exactsearches rather than similarity searches. Tries does\nsupport similarity searches, but its memory-based fea-\nture makes it di\x0ecult to apply to large databases.\nMoreover, if the alphabets for di\x0berent dimensions in\nan NDDS are di\x0berent, vectors in such a space can nolonger be considered as strings over an alphabet. The\nstring indexing methods are inapplicable in this case.\nA number of so-called metric trees have been intro-\nduced in recent years [22, 9, 5, 12, 4, 10]. These trees\nonly consider relative distances of data objects to or-ganize and partition the search space and apply the\ntriangle inequality property of distances to prune the\nsearch space. These techniques, in fact, could be ap-plied to support similarity searches in an NDDS. How-\never, most of such trees are static and require costly\nreorganizations to prevent performance degradation in\ncase of insertions and deletions [22, 9, 5, 12, 4]. On\nthe other hand, these techniques are very generic withrespect to the underlying data spaces. They only as-\nsume the knowledge of relative distances of data ob-\njects and do not e\x0bectively utilize the special charac-teristics, such as occurrences and distributions of di-\nmension values, of data objects in a speci\x0cc data space.\nHence, even for dynamic indexing techniques of thistype, such as M-tree [10], their retrieval performance\nis not optimized.\nTo support e\x0ecient similarity searches in an NDDS,\nwe propose a new indexing technique, called the ND-\ntree. The key idea is to extend the essential geometric\nconcepts (e.g., minimum bounding rectangle and area\nof a region) as well as some e\x0bective indexing strategies(e.g., node splitting heuristics in R*-tree) in CDSs to\nNDDSs. There are several technical challenges for de-\nveloping an indexing method for an NDDS. They aredue to: (1) no ordering of values on each dimension in\nan NDDS; (2) non-applicability of continuous distance\nmeasures such as Euclidean distance and Manhattandistance to an NDDS; (3) high probability of vectors\nto have the same value on a particular dimension in an\nNDDS; and (4) the limited choices of splitting pointson each dimension. The ND-tree is developed in sucha way that these di\x0eculties are properly addressed.\nOur extensive experiments demonstrate that the ND-\ntree can support e\x0ecient searches in high dimensionalNDDSs. In particular, we have applied the ND-tree\nto genome sequence databases. Performance analysis\nshows that the ND-tree is a promising indexing tech-\nnique for searching these databases.\nSeveral indexing techniques for genome sequence\ndatabases have recently been suggested in the litera-ture [20, 6, 14, 8, 18, 25]. They have shown that index-\ning is an e\x0bective way to improve search performance\nfor large genome sequence databases. However, mostgenome sequence data indexing techniques that have\nbeen reported to date are quite preliminary. They use\nonly basic indexing strategies, such as hashing [6, 14]and inverted \x0cles [25], which cannot be e\x0eciently used\nfor similarity searches [20, 18]. These techniques fo-\ncus more on biological criteria rather than develop-ing e\x0bective index structures. The previous work that\nis most related to ours, in terms of employing a tree\nstructure to index genomic data, is the application of\nmetric trees (GNAT [5] and M-tree [10]) to genome\nsequence databases suggested by Chen and Aberer [8].However, as the authors pointed out, it is very di\x0e-\ncult to select split points for an index tree in a general\nmetric space. They suggested that more experimentswere needed to verify the feasibility of their proposal\nfor genome sequence database applications. Further-\nmore, their approach is restricted to a special scor-ing function for local alignments that they were using.\nCompared to existing indexing techniques for genome\nsequence databases, our work focuses on developing anew e\x0ecient index structure for NDDSs with an ap-\nplication to genome sequence databases. Our method\nexploits e\x0ecient high-dimensional indexing strategies.\nThe rest of this paper is organized as follows. Sec-\ntion 2 introduces the essential concepts and notations\nfor the ND-tree. Section 3 discusses the details of theND-tree including the tree structure and its associ-\nated algorithms. Section 4 presents our experimental\nresults. Section 5 describes the conclusions and futurework.\n2 Concepts and Notations\nAs mentioned above, to develop the ND-tree, some\nessential geometric concepts in CDSs need to be ex-\ntended to NDDSs. These extended concepts are intro-\nduced in this section.\nLetAi(1\x14i\x14d)b ea n alphabet consisting of a\n\x0cnite number of letters . It is assumed that there is\nno ordering among letters in Ai.A d-dimensional\nnon-ordered discrete data space (NDDS) \xe2\x84\xa6dis de-\n\x0cned as the Cartesian product of dalphabets: \xe2\x84\xa6 d=\nA1\x02A2\x02:::\x02Ad.Aiis called the alphabet for the\ni-th dimension of \xe2\x84\xa6 d.T h e area (or size) of space \xe2\x84\xa6d\nis de\x0cned as: area(\xe2\x84\xa6d)=jA1j\x03jA2j\x03:::\x03jAdj, which\nin fact indicates the number of vectors in the space.'
