b'The PH-Tree \xe2\x80\x93 A Space-Ef\xef\xac\x81cient Storage Structure and\nMulti-Dimensional Index\nTilmann Z\xc3\xa4schke\nzaeschke@inf.ethz.chChristoph Zimmerli\nzimmerli@inf.ethz.chMoira C. Norrie\nnorrie@inf.ethz.ch\nInstitute for Information Systems, Department of Computer Science\nETH Zurich, Switzerland\nABSTRACT\nWe propose the PATRICIA-hypercube-tree, or PH-tree, a\nmulti-dimensional data storage and indexing structure. It\nis based on binary PATRICIA-tries combined with hyper-\ncubes for e\xef\xac\x83cient data access. Space e\xef\xac\x83ciency is achieved\nby combining pre\xef\xac\x81x sharing with a space optimised imple-\nmentation. This leads to storage space requirements that are\ncomparable or below storage of the same data in non-index\nstructures such as arrays of objects. The storage structure\nalso serves as a multi-dimensional index on all dimensions\nof the stored data. This enables e\xef\xac\x83cient access to stored\ndata via point and range queries. We explain the concept\nof the PH-tree and demonstrate the performance of a sam-\nple implementation on various datasets and compare it to\nother spatial indices such as the kD-tree. The experiments\nshow that for larger datasets beyond 107entries, the PH-\ntree increasingly and consistently outperforms other struc-\ntures in terms of space e\xef\xac\x83ciency, query performance and\nupdate performance. For some highly skewed datasets, it\neven shows super-constant performance, becoming faster for\nlarger datasets.\nCategories and Subject Descriptors\nE.1 [Data Structures ]: Trees; E.2 [ Data ]: Data Storage\nRepresentations; H.3.1 [ Information Storage and Re-\ntrieval ]: Content Analysis and Indexing\xe2\x80\x94 Indexing meth-\nods\nGeneral Terms\nAlgorithms, Experimentation, Performance\nKeywords\nMulti-dimensional index, space e\xef\xac\x83ciency, spatial index,\npatricia-trie, hypercube, quadtree, skewed data\nPermission to make digital or hard copies of all or part of this work for personal or\nclassroom use is granted without fee provided that copies are not made or distributed\nfor pro\xef\xac\x81t or commercial advantage and that copies bear this notice and the full citation\non the \xef\xac\x81rst page. Copyrights for components of this work owned by others than the\nauthor(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or\nrepublish, to post on servers or to redistribute to lists, requires prior speci\xef\xac\x81c permission\nand/or a fee. Request permissions from permissions@acm.org.\nSIGMOD\xe2\x80\x9914, June 22\xe2\x80\x9327, 2014, Snowbird, UT, USA.\nCopyright is held by the owner/author(s). Publication rights licensed to ACM.\nACM 978-1-4503-2376-5/14/06 ...$15.00..\nhttp://dx.doi.org/10.1145/2588555.2588564.1. INTRODUCTION\nMulti-dimensional numerical data is used in many applica-\ntions, for example in spatial contexts such as geo-information\nsystems, astronomy or ray-tracing. The data often has two\nor three spatial dimensions plus any number of additional di-\nmensions such as a possible node identi\xef\xac\x81er in geo-information\nsystems.\nIn this paper we present the PATRICIA-hypercube-tree\n(PH-tree) which combines binary PATRICIA-tries [16, 17]\nwith a multi-dimensional approach similar to quadtrees while\nbeing navigable through hypercubes. The pre\xef\xac\x81x sharing\nused in PATRICIA-tries leads to reduced space requirements,\nwhile the use of hypercubes allows navigation to sub-nodes\nand entries much more e\xef\xac\x83ciently than binary trees because\nit is largely independent of the number of dimensions.\nThe internal structure of the PH-tree is determined only\nby the data, not by order of insertion or deletion of entries.\nRebalancing is conceptually not possible but imbalances are\ninherently limited. For updates to the tree, having no rebal-\nancing allows the changes required on the tree to be con\xef\xac\x81ned\nto at most two nodes. One node is updated and possibly a\nsecond one is either created or deleted, while at most one en-\ntry is moved between the two nodes. Our approach is mainly\naimed at in-memory storage with integrated indexing and\nquery requirements. However, in the case of datasets with\nmany dimensions, the PH-tree is also suitable for persistent\nstorage because the nodes of the PH-tree get large enough to\nbe split e\xef\xac\x83ciently to \xef\xac\x81t into disk-pages. With many dimen-\nsions, the e\xef\xac\x83ciency for updates, queries and storage space\nmakes the PH-tree suitable to be used not only as an exten-\nsion for indexing data, but also as a primary storage layout\nfor databases.\nTo evaluate our approach, we compared its performance\nwith freely available implementations of other structures\nsuch as kD-trees and critical-bit-trees. We measured inser-\ntion, deletion, range queries and point queries on both syn-\nthetic data and real-world data with the the result that the\nPH-tree outperforms other solution consistently in terms of\nspace and performance for datasets with 107entries or more.\n2. RELATED WORK\nStarting from the simple binary search tree, the list of al-\ngorithms and data structures devised for various use-cases\nis long and di\xef\xac\x80erences are often only found in the details.\nIn the domain of multi-dimensional data, we can di\xef\xac\x80erenti-\nate between point access methods (PAM) and space access\nmethods (SAM) as proposed in the survey by [8]. A more\nrecent survey with \xef\xac\x81ne-grained classi\xef\xac\x81cation is given in [15].\n397\n'
b'The main representatives of the PAM category are kD-\ntrees and quadtrees. kD-trees [2] are k-dimensional binary\ntrees where the inner nodes of the tree describe axis-aligned\nhyper-planes that divide the space into two half-spaces cor-\nresponding to its child-nodes. The axis along which the\nsplit is performed is the same for all nodes on a certain\ntree level. Usually, dimensions are then switched between\nlevels in a round-robin fashion. Since each node represents\nan inserted point, the tree\xe2\x80\x99s structure is dependent on the\norder of insertion and deletion operations and prone to de-\ngeneration. Rebalancing the tree is tricky since the usual\nrotation operations of other binary trees are not applica-\nble to the relation between split-dimension and tree level.\nExtensions to the basic kD-tree have been proposed for ex-\nternalisation through combination with B-tree ideas (kD-B-\ntree [20]), avoiding empty nodes by avoiding splitting nodes\nthat are not full on insertion (hB-tree [14]) or by the loga-\nrithmic method of a forest of kD-trees (Bkd-tree [19]). Other\nversions of the kD-tree extend its capabilities into the SAM\narea by handling the problem of regions overlapping split-\nplanes in di\xef\xac\x80erent ways, for example the SKD-tree [12] or\nthe Extended kD-tree [4].\nIn contrast to the popular kD-tree, the quadtree [6] splits\nthe space in all dimensions at each node. This means that,\nin the 2-dimensional case, each inner node has 4 children,\none for each quadrant. In our PH-tree, we take the same\napproach of splitting the space in all dimensions at each\nnode in the tree. One recent extension to the quadtree is the\nIQ-tree [5], an indexing mechanism for \xef\xac\x81ltering geo-textual\ndata by combining a 2D quadtree with an inverted \xef\xac\x81le for\nkeywords, which allows them to e\xef\xac\x83ciently perform localised\nsearches for tagged geo data. Quadtrees are rarely used\noutside 2D or 3D problems because they tend to require a\nlot of memory due to their propensity for requiring many\nand large nodes. In the PH-tree, we counter this by using a\ncombination of other approaches.\nOne of these other approaches is the PATRICIA-trie [16],\nwhere strings are stored in a pre\xef\xac\x81x-sharing method which is\nusually much more space e\xef\xac\x83cient than storing each key indi-\nvidually. PATRICIA-tries also have the advantage that they\ndo not depend on insertion order. In general, any kind of\ndata can be stored in such a tree by taking the bit represen-\ntation of the data and using the tree to manage bit-strings.\nSuch bit-tries are also known as crit(ical)-bit-trees.\nIn order to store keys with multiple dimensions, the values\nof the di\xef\xac\x80erent dimensions can be interleaved into a single\nbit-string in a round-robin fashion as discussed in [17, 13].\nWhile [13] provides a thorough complexity analysis of que-\nries in binary tries, [17] extend this idea by allowing keys\nthat consist of variable length text as well as numeric data.\nFurthermore, they implement an approximate range search\nalgorithm that reduces the number of visited nodes by up to\n50% by slightly reducing query accuracy close to the edges\nof the query hyper-rectangle. While their approach is pre-\nsented for a binary tree, it should also work for the PH-tree\nand we see it as a desirable future extension.\nThe PH-tree is also based on the idea of pre\xef\xac\x81x-sharing.\nHowever, unlike other PATRICIA-tries, the PH-tree is not\na binary tree but a quadtree. This reduces the number of\nnodes in the tree by allowing up to 2kentries per node.\nWithin these nodes, a hypercube-based addressing scheme\nfor the sub-nodes provides e\xef\xac\x83cient access for higher dimen-\nsional data. For example, locating a key in a 16-dimensionalboolean dataset requires visiting up to 16 nodes in a binary\ntree. In a hypercube quadtree, because the interleaved bit-\nstring directly represents the array position, locating a key\nrequires accessing only one node followed by a simple array\nlook-up inside the node.\nAnother approach to reducing space requirements is to\nserialise the indexing structure into a single bit stream [9],\nwhich signi\xef\xac\x81cantly reduces the storage overhead for man-\naging objects in memory. Unlike the referenced paper, we\napply such serialisation, not to the whole storage structures,\nbut to each node separately.\nFinally, there are PAM structures such as the LSM-tree\nproposed in [18] which are optimised for high update rates\nas they occur in transaction processing systems. However,\nthe LSM-tree supports only 1-dimensional data and is opti-\nmised for persistent storage while the k-dimensional PH-tree\nis mainly aimed at in-memory indexing.\nThe most prominent SAM structure is the R-tree [10].\nModern forms of the R-tree include the PR-tree [1] and\nthe Hilbert-tree [11], which optimise disk-IO, and the X-\ntree [3], which improves performance for high-dimensional\ndata. SAM structures are primarily aimed at handling re-\ngion data. While they can also be used to store points by\nusing regions with size 0, they can not compete with PAM\nstructures in this domain.\n3. THE PH-TREE\nThe PH-tree is essentially a quadtree [6] that uses hyper-\ncubes, pre\xef\xac\x81x-sharing [16] and bit-stream storage [9]. The\napproach of the PH-tree avoids the need for several con-\ncepts that are often considered necessary for e\xef\xac\x83cient multi-\ndimensional trees.\nFirst, many proposed structures split the space in each\nnode in only one dimension in a round-robin fashion. Con-\ntrary to that, we build on the quadtree and split the space\nin each node in all dimensions, which makes the access, such\nas queries, virtually independent of the order in which the\ndimensions are stored. This also tends to reduce the number\nof nodes in the tree, because each node can contain up to\n2kchildren instead of 2. At the same time, the maximum\ndepth of the tree is independent of kand equal to the num-\nber of bits in the longest stored value, i.e. 8 when storing\nbyte values.\nSecond, many structures aim to balance the tree in order\nto avoid degenerated trees which are ine\xef\xac\x83cient in terms of\nperformance and space requirements. The PH-tree however\nis unbalanced (see also the BV-tree [7]), which has the ad-\nvantage that there is no need for rebalancing and the tree\nis stable with respect to insert or delete operations. This is\nuseful for concurrency and when stored on disk, because it\nlimits the number of pages that need to be rewritten. The\nPH-tree avoids problems with degeneration by inherently\nlimiting imbalance, i.e. the maximum depth of the tree, dur-\ning construction.\nThird, the PH-tree does not aim for maximum node oc-\ncupancy in order to reduce the number of required nodes.\nInstead of avoiding nodes, the PH-tree e\xef\xac\x83ciently reduces the\nsize overhead of nodes.\nTrees of the kD-tree family split the space in each node\ninto two subspaces along one of the dimensions. Contrary to\nthese, the PH-tree splits the space in each node in all dimen-\nsions and uses hypercube navigation within a node to locate\nsub-nodes and entries. One advantage of hypercubes is that,\n398'
