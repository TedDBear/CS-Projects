b'The C-NDTree: AMultidimensionalIndex for Hybrid\nCo\nntinuous and Non-ordered DiscreteDataSpaces\nChangqing Chen\nDepartment of Computer\nScienceand Engineering\nMichigan State University\nEastLansing, MI 48824, USA\nchencha3@msu.eduSakti Pramanik\nDepartment ofComputer\nScience andEngineering\nMichigan State University\nEastLansing, MI48824, USA\npramanik@cse.msu.eduQiangZhu\nDepartment ofComputer and\nInformation Science\nTheUniversityof\nMichigan-Dearborn\nDearborn,MI48128, USA\nqzhu@umich.edu\nWatveAlok\nDepartment ofComputer\nScienceand Engineering\nMichigan State University\nEastLansing, MI48824, USA\nwatvealo@msu.eduGangQian\nDepartment ofComputer\nScience\nUniversityofCentral\nOklahoma\nEdmond, OK73034, USA\ngqian@uco.edu\nABSTRACT\nContemporary database applications often perform queries\nin hybrid data spaces (HDS) where vectors can have a mix\nof continuous valued and non-ordered discrete valued dimen-\nsions. To support e\xef\xac\x83cient query processing for an HDS, a\nrobust indexing method is required. Existing indexing tech-\nniques to process queries e\xef\xac\x83ciently either apply to contin-\nuous data spaces (e.g., the R-tree) or non-ordered discrete\ndata spaces (e.g., the ND-tree). No techniques directly in-\ndexing vectors in HDSs have been reported in the literature.\nIn this paper, we propose a new multidimensional indexing\ntechnique, called the C-ND tree, to directly index vectors in\nan HDS. To build such an index, we \xef\xac\x81rst introduce some es-\nsential geometric concepts (e.g., hybrid bounding rectangle)\nin HDSs. The C-ND tree structure and the relevant tree\nbuilding and query processing algorithms based on these ge-\nometric concepts in HDSs are then presented. Strategies\nhave been suggested to make the values in continuous dimen-\nsions and non-ordered discrete dimensions comparable and\ncontrollable. Novel node splitting heuristics which exploit\ncharacteristics of both continuous and discrete dimensions\nare proposed. Performance of the C-ND tree is compared\nwith that of linear scan, R*-tree and ND-tree using range\nqueries on hybrid data. Experimental results demonstrate\nthat the C-ND tree is quite promising in supporting range\nqueries in HDSs.\n1. INTRODUCTION\nPermission to copy without fee all or part of this material is granted pro-\nvided that the copies are not made or distributed for direct commercial ad-\nvantage, the ACM copyright notice and the title of the publication and its\ndate appear, and notice is given that copying is by permission of the ACM.\nTo copy otherwise, or to republish, to post on servers or to redistribute to\nlists, requires afee and/or special permissions from the publisher, ACM.\nEDBT2009 , March 24\xe2\x80\x9326, 2009, Saint Petersburg, Russia.\nCopyright 2009 ACM 978-1-60558-422-5/09/0003 ...$5.00In many contemporary application areas like machine learn-\ning, information retrieval, and data mining, people often\nneed to deal with hybrid data, where vectors can have both\ndiscrete and continuous attributes. For example, the feature\nvectors used to retrieve/analyze images from World Wide\nWeb typically contain both continuous and discrete features:\nthe text describing them could be regarded as discrete val-\nued features while the statistics like pixel frequencies could\nbe treated as continuous valued features. Another applica-\ntion domain which may deal with hybrid vectors is Intrusion\nDetection. One of the main objectives of an Intrusion De-\ntection System is to classify a user as a malicious or a nor-\nmal user. Such a judgment should be based on information\nabout the users\xe2\x80\x99 behavioral statistics, such as the physical\nlocation, the time-frame within which speci\xef\xac\x81c commands\nare executed and the amount of time the user remains con-\nnected to a server. Clearly, some of the information like the\ntime for which user remains connected is continuous, while\nother information like the physical location can be discrete.\nTo support e\xef\xac\x83cient queries on vectors in an HDS, a multidi-\nmensional indexing scheme is required. However, to the best\nof our knowledge, no indexing scheme that directly indexes\nvectors in an HDS has been reported in the literature.\nMost multidimensional indexing schemes proposed in the\nliterature are for continuous data spaces (CDS), where val-\nues along each dimension are continuous (ordered). These\ntechniques are either based on data-partitioning, such as\nR-tree [9], R*-tree [2], R+-tree [17], SS-tree [22], SR-tree\n[11] and X-tree [3], or based on space-partitioning, such as\nK-D-B-tree [16] and LSDh-tree [10]. The data-partitioning\nbased techniques split an over\xef\xac\x82ow node by dividing the set\nof its indexed vectors according to the data distribution,\nwhile the space-partitioning based methods split an over\xef\xac\x82ow\nnode by partitioning its corresponding data space. However,\nthese indexing techniques cannot be directly applied to non-\nordered discrete data spaces (NDDS) since they rely on the\nordering property of data values in each dimension. If these\ntechniques are used for a hybrid data space (HDS), they can\n462\n'
b'only index the continuous subspace of the HDS.\nTh\ne vectors in an NDDS can be considered as \xef\xac\x81xed length\nstrings when the alphabet for every dimension of an NDDS is\nthe same. In this case, the string indexing methods, such as\nTries [6], Pre\xef\xac\x81x B-tree [1] and String B-tree [7], can be uti-\nlized. To deal with more general cases and overcome the lim-\nitations of string indexing methods, two multidimensional\nindexing techniques specially designed for NDDSs, i.e., the\nND-tree [13, 14] and the NSP-tree [15], have been recently\nproposed. The ND-tree is based on data-partitioning, while\nthe NSP-tree is based on space-partitioning. Both tech-\nniques exploit the unique characteristics of an NDDS. If they\nare used for an HDS, they can only index the discrete sub-\nspace of the given HDS.\nIssues in processing hybrid data in various application ar-\neas have also been studied in the literature. A number of\ndiscretization methods were suggested to convert continuous\ndata to discrete data [4, 8, 12]. Indexing methods are pre-\nsented in [20, 21] to search for images and videos with both\ndiscrete and continuous features. However, these indexes\ncan not support queries on discrete and continuous dimen-\nsions simultaneously. The Multi-scale Similarity Indexing\n(MSI) method was introduced in [18, 19] to index multi-\nple text and visual features for images. This method \xef\xac\x81rst\npartitions each feature space into clusters, then uses the sim-\nilarity of each image to its corresponding cluster\xe2\x80\x99s center as\nan indexing key, and applies a mapping function to keep the\nkeys for each cluster distinct in di\xef\xac\x80erent scale levels. After\nthe multiple features are transformed into a one-dimensional\nkey space, the standard B+-tree is employed to index these\nkeys.\nIn this paper, we present a new indexing technique, inspired\nby the R*-tree [2] and the ND-tree [13], to directly index\nvectors (without conversion/transformation) in an HDS. We\n\xef\xac\x81rst de\xef\xac\x81ne some essential geometric concepts such as rect-\nangle, area, edge length, and overlap in an HDS. Based on\nthese concepts, a multidimensional hybrid tree, called the\nC-ND tree, and the relevant algorithms are developed. To\ndeal with the unique characteristics of an HDS, a novel node-\nsplitting strategy called the hybrid split, which combines\ntwo splits (one on a non-ordered discrete dimension and the\nother on a continuous dimension) into one, is proposed. We\nconducted extensive experiments to compare the query per-\nformance of the C-ND tree with that of the ND-tree and\nthe R*-tree. We also compared the C-ND tree performance\nwith the 10% linear scan for the given HDS. Our experimen-\ntal results demonstrate that the C-ND tree is generally more\ne\xef\xac\x83cient than the other three existing methods.\nThe rest of the paper is organized as follows. Section 2\nintroduces the relevant concepts and notations. Section 3\npresents the C-ND tree, including its tree structure and rel-\nevant algorithms. Section 4 reports our experimental results.\nSection 5 summarizes the conclusions and future work.\n2. CONCEPTSANDNOTATIONSFORTHE\nHDS\nAn HDS is a multidimensional vector data space which con-\ntains both (ordered) continuous and non-ordered discrete\ndimensions. In the past, many indexing techniques were de-veloped for the CDS. An NDDS, as opposed to the CDS, is\na data space in which all elements/values along each dimen-\nsion are discrete and have no natural ordering among them.\nAn example of non-ordered discrete data could be the colors\nlike red, green and blue. Every color is unique but there is\nno natural ordering among them.\nTo develop an indexing technique, like the R*-tree for CDSs\nand the ND-tree for NDDSs, for HDSs, some essential geo-\nmetric concepts such as rectangles in CDSs need to be ex-\ntended to an HDS. The rest of this section will introduce\nand de\xef\xac\x81ne such extended geometric concepts to be used in\nour C-ND tree.\nLetdbe the total number of dimensions and let Di(1\xe2\x89\xa4i\xe2\x89\xa4\nd) be the domain for the ithdimension in an HDS, which can\nbe either continuous or non-ordered discrete. For a continu-\nous dimension, Diis an interval/range of real numbers. Let\nmin(Di) and max( Di) denote the smallest and the largest\nnumbers in the range such that Di= [min( Di),max(Di)].\nWe de\xef\xac\x81ne domain size (or length) of a continuous dimen-\nsion as Length (Di) = max( Di)\xe2\x88\x92min(Di). For a discrete\ndimension, its domain Diis a set of non-ordered discrete\nvalues/elements/letters. The domain size (or length) of a\ndiscrete dimension is de\xef\xac\x81ned as the alphabet size of the\nithdimension. Thus, for a discrete dimension, we have,\nLength (Di) =|Di|. Ad-dimensional HDS \xe2\x84\xa6 dis de\xef\xac\x81ned\nas the Cartesian product of the ddomains: \xe2\x84\xa6 d=D1\xc3\x97\nD2\xc3\x97...\xc3\x97Dd.\xce\xb1= (\xce\xb11, \xce\xb12, ..., \xce\xb1 d) is a vector in \xe2\x84\xa6 dif\n\xce\xb1i\xe2\x88\x88Di(1\xe2\x89\xa4i\xe2\x89\xa4d). For simplicity, in the rest of this\npaper, we assume that all the discrete domains are identical\nand that all the continuous domains are identical. Similar\nto [14], the discussion can be easily extended to a space with\ndomains of various sizes.\nA hybrid (hyper-)rectangle Rin \xe2\x84\xa6 dis de\xef\xac\x81ned as the Carte-\nsian product R=S1\xc3\x97S2\xc3\x97. . .\xc3\x97Sd, where Siis called the\ncomponent-set or range of Ron the ithdimension. If the\nithdimension is discrete (i.e., Diis a discrete domain) then\nSiis a set of discrete elements such that Si\xe2\x8a\x86Di. On the\nother hand, if the ithdimension is continuous (i.e., Diis a\ncontinuous domain), Siis a set [min( Si),max(Si)] such that\nmin(Di)\xe2\x89\xa4min(Si)\xe2\x89\xa4max(Si)\xe2\x89\xa4max(Di).\nThe area of a hybrid rectangle R=S1\xc3\x97S2\xc3\x97. . .\xc3\x97Sd, is\nde\xef\xac\x81ned as the product of lengths of all the component sets.\nMathematically, Area(R) =\xe2\x88\x8fd\ni=1Length (Si). The perime-\nter of Ris de\xef\xac\x81ned as, Perimeter (R) =\xe2\x88\x91d\ni=1Length (Si).\nGiven two hybrid rectangles R=S1\xc3\x97S2\xc3\x97. . .\xc3\x97Sdand\nR\xe2\x80\xb2=S\xe2\x80\xb2\n1\xc3\x97S\xe2\x80\xb2\n2\xc3\x97. . .\xc3\x97S\xe2\x80\xb2\nd, the overlap of RandR\xe2\x80\xb2isArea(R\xe2\x88\xa9\nR\xe2\x80\xb2) =Area((S1\xe2\x88\xa9S\xe2\x80\xb2\n1)\xc3\x97(S2\xe2\x88\xa9S\xe2\x80\xb2\n2)\xc3\x97. . .\xc3\x97(Sd\xe2\x88\xa9S\xe2\x80\xb2\nd)).\nGiven a set of hybrid rectangles {R1, R2, . . . , R n}where,\nR1=S1,1\xc3\x97S1,2\xc3\x97. . .\xc3\x97S1,d, R2=S2,1\xc3\x97S2,2\xc3\x97. . .\xc3\x97\nS2,d, . . . , R n=Sn,1\xc3\x97Sn,2\xc3\x97. . .\xc3\x97Sn,d, the hybrid min-\nimum bounding rectangle (HMBR) of {R1, R2, . . . , R n}is\nde\xef\xac\x81ned as the Cartesian product:\xe2\x8b\x83n\ni=1Si,1\xc3\x97\xe2\x8b\x83n\ni=1Si,2\xc3\x97\n. . .\xc3\x97\xe2\x8b\x83n\ni=1Si,d. The component set of the HMBR on the\nithdimension is S1,i\xe2\x88\xaaS2,i\xe2\x88\xaa. . .\xe2\x88\xaaSn,i. The edge length\nLength (HMBR,i ) of the HMBR on the ithdimension is\n|S1,i\xe2\x88\xaaS2,i\xe2\x88\xaa. . .\xe2\x88\xaaSn,i|if the dimension is discrete, and it is\nmax{max(S1,i),max(S2,i), . . .max(Sn,i)} \xe2\x88\x92min{min(S1,i),\nmin(S2,i), . . .min(Sn,i)}if the dimension is continuous.\n463'
