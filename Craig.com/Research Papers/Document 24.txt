b'D8-tree: a de-normalized approach for multidimensional\ndata analysis on key-value databases\nCesare Cugnasco, Yolanda Becerra, Jordi Torres, Eduard Ayguad\xc3\xa9\nBarcelona Supercomputing Center\nUniversitat Polit\xc3\xa8cnica de Catalunya - Department of Computer Architecture\n{cesare.cugnasco,yolanda.becerra,jordi.torres,eduard.ayguade}@bsc.es\nAbstract The shift to more parallel and distributed computer archi-\ntectures changed how data is managed consequently giv-\ning birth to a new generation of software products, namely\nNoSQL. These products o\xef\xac\x80er a scalable and reliable solu-\ntion for \xe2\x80\x9dBig Data\xe2\x80\x9d, but none of them solves the problem\nof analyzing and visualizing multidimensional data. There\nare solutions for scaling analytic workloads, for creating dis-\ntributed databases and for indexing multidimensional data,\nbut there is no single solution that points to all three goals\ntogether.\nWe propose the D8-tree , a De-normalized Octa-tree index\nthat supports all three goals. It works with both analytical\nand data-thinning queries on multidimensional data ensur-\ning, at the same time, low latency and a linear scalability.\nWe have implemented a D8-tree prototype, and we com-\npared it with PostGIS on a set of queries required by an\nin-house HPC application. We found the D8-tree outper-\nforming PostGIS in all tested queries, with a performance\ngain up to 47 times.\nCCS Concepts\n\xe2\x80\xa2Information systems \xe2\x86\x92Key-value stores; \xe2\x80\xa2Computing\nmethodologies \xe2\x86\x92Distributed algorithms; Graphics\nsystems and interfaces; \xe2\x80\xa2Human-centered computing \xe2\x86\x92\nVisualization;\xe2\x80\xa2Applied computing \xe2\x86\x92Life and medical\nsciences;\nKeywords\nNoSQL, key-value database, Multidimensional index, data\nvisualization, Big Data\n1. INTRODUCTION\nThe classic algorithms available in literature for multidi-\nmensional indexing (MI), such as R-trees[9] or Quad-Trees[7],\nwere designed for optimizing the access to disk. They were\ndesigned to \xef\xac\x81t an environment where the major performance\nACM acknowledges that this contribution was authored or co-authored by an em-\nployee, contractor or af\xef\xac\x81liate of a national government. As such, the Government\nretains a nonexclusive, royalty-free right to publish or reproduce this article, or to al-\nlow others to do so, for Government purposes only.\nICDCN \xe2\x80\x9916, January 04-07, 2016, Singapore, Singapore\nc\xe2\x83\x9d2016 ACM. ISBN 978-1-4503-4032-8/16/01. . . $15.00\nDOI:http://dx.doi.org/10.1145/2833312.2833314cost was the seek time when accessing data sectors. Thirty\nyears ago, when A. Guttman \xef\xac\x81rstly described the R-tree,\nreducing the number of accesses to disk was surely one of\nmost important factors to take into account to guarantee\ngood performance. Since then, the technology background\nhas inevitably changed. A modern database system runs on\nmultiple servers, each of them having multiple CPUs. More-\nover, rotational disks are being rapidly replaced by Solid\nState Disks (SSDs) which do not have any latency times\nwhen accessing non contiguous sectors. As a consequence,\nrandom access to disk sector does not imply any more per-\nformance drawbacks.\nThese considerations are not new in the database commu-\nnity and, indeed, they have pushed the creation of a new\ngeneration of databases. In the last decade, there has been\na rupture caused by the increasingly di\xef\xac\x83cult conciliation be-\ntween the well-established standards and the computer ar-\nchitecture that was evolving towards distributed and highly-\nparallel systems. The term NoSQL identi\xef\xac\x81es this new gen-\neration of databases that has abandoned the most popular\nstandard, namely the relational model, in favor of better\nperformance and scalability.\nHowever, these improvements have come at the cost of re-\nducing the database functionalities to a limited set of simple,\nbut fast and scalable, operations. Consequentially, a user is\nforced either to continue using legacy systems or to imple-\nment an ad-hoc middleware software.\nWe found ourselves in the described case while collaborat-\ning with the development of an application for visualizing,\nand analyzing, the results of HPC simulations. The goal of\nour collaboration is to enable users to navigate interactively\nin the simulation. The interaction must be done so that a\nuser can have the opportunity of increasing or decreasing at\nwill the level of details visualized, and also the precision of\nthe query results.\nThese requirements need a backend service able to handle\n3-dimensional queries but, at the same time, keeping the re-\nsponse time in the order of a second; a limit that is necessary\nfor ensuring a natural interaction with a human being.\nWe took into consideration several existing solutions, as\nwell as novel algorithms proposed in literature, but we found\nnone of them satisfactory for our requirements in terms of\nperformance and scalability. Indeed, while there are many\nscalable indexing platforms supporting 2-dimensional Geo\nindexing - like Solr or ElasticSearch -, we found none of them\nfully supporting the more complex 3-dimensional case.\nHence, we decided to create a novel indexing algorithm,\ndesigned to be implemented on top of modern distributed\n'
b'key-value databases. Its design employs de-normalization\ntechniques to increase the scalability and the parallelism of\nmultidimensional queries. It also allows to run e\xef\xac\x83cient data-\nthinning queries, enabling the user to tackle massive data\nsets by analyzing smaller, but statistically relevant, subsets.\nWe have implemented a prototype and benchmarked it to a\nstate-of-the-art relational database such as PostGIS. Our so-\nlution has proven to execute faster on all the tested queries,\nbeing up to 47 times faster than the relational counterpart\nwith a modest higher cost in terms of space.\nThe rest of the paper is organized as follows. Section 2 dis-\ncusses the reasons of our work. Section 3 gives a brief intro-\nduction about multidimensional indexes and data-thinning\ntechniques. Section 4 provides a characterization of the per-\nformance of a NoSQL database. Section 5 describes our\nproposal: the D8-tree. Section 6 reports the results of the\ncomparison between PostGIS and our solution. Section 7\nexamines the cost in terms of space of our de-normalized\napproach. Finally, in Section 9 we give our conclusions and\ndescribe the future works.\n2. MOTIV ATION\nMolecular dynamic simulations are common in High Per-\nformance Computing (HPC) research, as long as they are\nuseful for a broad set of problems, such as theoretical physics,\nbiochemistry, and biophysics. These simulations require a\nmassive quantity of computational resources, and thus they\nrun on Supercomputers. Scientists use these simulations to\nvalidate theories and to study particular physical behaviour.\nFigure 1: A screen-shot of the application\nOur research started as a collaboration in a project that\nemploys Molecular Dynamics for studying how the particles\n\xef\xac\x82ow through the human respiratory system. As shown in\nFigure 1, by using a partial model of the human body it\nhas been possible to simulate how the particles are dragged\ninto the bronchi during an inhalation. The simulation has\nbeen possible using Alya [22], an in-house HPC-based multi-\nphysics simulation code, designed from scratch to run ef-\n\xef\xac\x81ciently in parallel supercomputers, solving coupled prob-\nlems.\nThe goal of the study is understanding how drugs are assim-\nilated by inhalation, thus allowing to improve the existing\nmedicine assimilation techniques. However, the simulation\ndoes not provide the result of a problem directly; it gener-\nates a huge data set which has to be made available to a\nscientist for producing useful contributions.\nOur collaboration starts here, in making the simulationeasy to explore and visualize. Their size exceed the quan-\ntity of memory available in a single computer, thus we have\nto limit the number of elements visualized at the same time.\nAlso, the user must be able to increase or reduce at will\nthe number of particles visualized, to focus only on limited\nregions or to execute analytical queries. For example, nar-\nrowing the visualization in a particular part of the trachea,\nasking where the particles that were in an area have \xef\xac\x82own\nto, or knowing the percentage of the di\xef\xac\x80erent types of par-\nticles in a given space, etc. Last but not least, all these\nrequests must run in a time of the order of a second - if\nnot less -, allowing a painless and responsive navigation of\na simulation.\nRegrettably, as we will analyze in more detail later on,\nthese requirements are not available with the existing solu-\ntions. There are solutions for scaling Big Data analysis, for\ncreating distributed indexes and for indexing multidimen-\nsional data, but there is no single solution that points to\nall three goals together. Indeed, the \xef\xac\x81rst two are ine\xef\xac\x80ective\nin the case of multidimensional data due to the lack of a\nuniversal order of elements in a vector space. At the same\ntime, the existing MI algorithms cannot scale linearly since\nit is not possible to traverse them with an arbitrary level\nparallelism. MI algorithms organize data hierarchically into\na tree and, therefore, the tree fan-out limits the parallelism.\nOur solution aims to support all these goals together: a\nframework allowing to execute both analytical and data-\nthinning queries on multidimensional data ensuring, at the\nsame time, short response times and a linear scalability on\nmultiple servers.\n3. BACKGROUND\nIn literature, there are dozens of contributions about both\nmultidimensional indexing algorithms and data-thinning tech-\nniques. The \xef\xac\x81rst divides in two main categories: Space par-\ntitioning indexes and Binary Tree evolutions.\nWith the term space partitioning we refer to a class of hierar-\nchical data structures that recursively decompose a certain\nspace into disjoint partitions so that any element can be\nstored in one, and only one, partition. This constraint leads\nto a simple search procedure, but it causes the tree to be\nskinny, tall and potentially unbalanced.\nIndeed, while a one-dimension binary tree can use node ro-\ntation techniques to re-balance itself, the lack of a universal\norder on vector spaces, makes these operations impossible.\nDi\xef\xac\x80erently, other index algorithms, such as the R-tree and\nits variants, do not have the constraint of disjoint spaces.\nEach node is in charge of a speci\xef\xac\x81c space, but nodes can\nshare common areas. This relaxation allows the node to\nhave a better fan-out and balance, however it comes with a\nhigher search cost as long as results can be found on multi-\nple tree paths.\nAlthough many algorithms are available in literature, we will\ndescribe only two of them, as they are the most common,\nand most of the available algorithms are their evolutions.\n3.1 Quad-tree\nThe Quad-tree is a space partitioning algorithm where\nthe splitting strategy is \xe2\x80\x9dspace driven\xe2\x80\x9d. This means that,\nno matter how the data is distributed inside a block, when\nit splits, the resulting children nodes will have a size and a\nposition which depend only on the height of the tree and\nspace dimensions.'
