b'Balanced Multidimensional Extendible Hash Tree \nEkaw J. Otoo \nSchool of Computer Science \nCarleton University \nOttawa, Canada, KlS 5B6. Abstract We present a method for designing a multidimensional order preserving extendible hashing scheme that allows the directory to grow almost linearly with the number of insertions, irrespective of the key distribution. Such robustness in the design is achieved through \nthe use of a hierarchical directory that grows in a man- \nner similar to a multidimensional B-tree. For most prac- \ntical directory sizes of at most 2s* entries, we guarantee \nno more than three diik accesses for an exact match \nsearch. Like the grid file, the directory corresponds \nto a rectilinearly partitioned attribute space which is \nrepresented as d-dimensional extendible &ray. Hence \nrange and partial-range searches are efficiently executed \nin 0(n~), where no is the number of rectangular cells \nthat cover the response region. \n1. Introduction \nGiven a file of records whose keys are composed of d-dimen- \nsional vectors K = (kl,kz , . . . , kd), we address the problem of \nthe storage and maintenance of such a file under the operations \nof insertions, deletions and partial-range queries. Exact-match, \npartial-match and range queries are considered as special cases of \nthe partial range queries. Let the attributes be defined by inte- \ngers 1,2,. . . , d and let S be a subset of the attributes with cardi- \nnality ]S] < d. For each attribute j, let [ai, pi] be some specified \ninterval. Then the partial-range query recovers all records whose \nkey @I, kz, . . . kd) satisfy the predicate 3 = j$s(s(oLj 5 kj < ai). \nThe interest in such multidimensional data organization is \nexpressed in many applications of relational, geographic, pi&o- \nPermission to copy without fee all or part of this material is granted \nprovided that the copies are not made or distributed for direct \ncommercial advantage, the ACM copyright notice and the title of the \npublication and its date appear, and notice is given that copying is by \npermission of the Association for Computing Machinery. To copy \notherwise, or to republish, requires a fee and/or specific permission. \nQ 1986 ACM-0-XY7YI-17Y-2/86/0300-0100 $00.75 rial and geometric databases that require extensive associative, \nand region searching. The literature is adorned with diverse \nstrategies for implementing such data organization. They span \nfrom tree structured methods such as the K-D-tree [l], the Quad- \ntrees [6,19,22] and the K-D-B-trees [21], to multidimensional di- \nrect access methods such as the grid-file or multidimensional \nextendible hashing [7,8,12,15,18,20,23], the interpolation-based \nindex method [3], multidimensional linear hashing [17], and dy- \nnamic multipaging [14]. \nThe direct access methods with the exception of dynamic \nmultipaging, are all based on one or the other of two one di- \nmensional dynamic hashing : extendible hashing [4] and linear \nhashing [9]. The two diik access principle of extendible hashing \nand the fact that no special overflow organization is required, \nmake it very attractive for adaptation in multiple key data or- \nganization. \nThe underlying principle of the multidimensional extendible \nhashing is as follows. Let each key be a d-dimensional vector \nK = (kl,kd,..., kd). In the sequel, our use of the term \xe2\x80\x98key\xe2\x80\x9d \nK may also imply a record with a key value K, depending on \ncontext. A pseudo-key K\xe2\x80\x99 corresponding to K is defined as \nK\xe2\x80\x99 = (k;, k; ,..., kh),whereki=$j(kj),forj=1,2 ,..., d,isa \nbinary value in [O,l]. The function $j defines a binary encoding \nof values of attribute j. Equivalently, ki may be conceived as \nan infinite sequence of O/l bits. Consider the geometric repre- \nsentation of the records of the file as points in a d-dimensional \nhypercube [0, 111 x (0,112 x . . . x [0, I],+ This space is termed the \nattribute space, bitmap or key space of the file. The dynamic \ndirect. access lile organization schemes essentially partition the \nattribute space rectilinearly into rectangular regions or cells such \nthat, for some predefined page capacity b, the number of points \nin a rectangular cell is no more than b. This explicit parti- \ntioned space is represented either as a directory whose entries \n100 \n'
b'are pointers to the pages where the records are stored or as data \npages. In the former representation, the attribute space may \nbe conceived as partitioned explicitly into regions of rectangular \ncells where each region corresponds to a group of cells with a \ncommon page pointer. The significant differences between the \nvarious dynamic multidimensional hashing schemes is in the im- \nplementation of the directory and the organization of the data \npages. \nTo locate a record in two disk accesses, the directory is typ \nically represented as a one level multidimensional array. It is \nshown in the analysis of extendible hashing and the grid file \n[5,11,20], that if the distributions of the keys in the attribute \nspace is reasonably uniform, the directory size is superlinear. \nOn the other hand non-uniform data distribution generates an \nalmost exponential directory growth particularly for small data \npage capacities. The use of the scheme for efficient range search- \ning requires order preservation in the sense that for each at- \ntribute j having key components &and kh, if &jl 5 k+, then \nkil 5 kL. Under such conditions one frequently encounters non- \nuniform data distributions and the directory growth becomes of \nmuch concern. \nThe question of organizing the directory for an order pre- \nserving extendible hashing scheme so that it gracefully adapts \nto the key distribution has only recently been addressed by \nBurkhard [3], Krishnamurthy and Whang [S], O&e1 [18] and \nHinrichs [2]. There are two main ideas that have been advanced. \nThe first advocates the use of a piecewise linear function. The \nsecond proposes the use of a two level directory. We present a \ngeneral method for designing a multilevel directory associated \nwith multidimensional extendible hashing that allow linear di- \nrectory growth. We show that a straight forward hierarchical \nbuilt up of the directory fails to restrain the potential exponen- \ntial growth of the directory even for uniform key distribution. \nIn (181, we developed the multidimensional extendible hash- \ning (MDEH), and defined appropriate mapping function for the \nscheme. We resolve the shortcomings in the design so that non- \nuniform distributed keys may be satisfactorily handled with a \ndirectory of moderate size. This new scheme is referred to as a \nBalanced Hierarchical Multidimensional Extendible Hash \xe2\x80\x98Dee \n(BMEH-tree). The method integrates the concepts of MDEH \nand the K-D-B-tree of Robinson [21]. Unlike any known meth- \nods, the local depth maintained in the directory play a signif% \ncant role in determiniig the target page of a key. TO highlight \nthe considerable reduction in directory size under uniform and non-uniform key distributions we compare the scheme with the \none level directory design (MDEH) and an alternative multilevel \ndirectory design whose nodes are not height balanced. This la& \nter design is referred to simple as a multidimensional extendible \nhash tree (MEH-tree). Our experimental studies show that the \nBMEH-tree is clearly superior in maintainiug the minimum di-\xe2\x80\x99 \nrectory size under both uniform and non-uniform key distribu- \ntion. \n2. Design Concepts \n2.1. A Variant of Extendible Hashing \nThe progression of the ideas involved in the design of the bal- \nanced multidimensional extendible hashing scheme begin with \nan order preserving variant of the extendible hashing technique \nof Fagin et al. [4]. This is outlined briefly here. Let each key \nbe a single attribute value and for simplicity, consider this as \na sequence of O/l bits K = zrzzzs. . . z,,,, of length w = 32 \nsay. The file organization is comprised of two levels: a directory \nwhich we denote by D, and a set of data pages (5, P2,. . . ,P,,}. \nThe value nz varies in consonance with the file expansion and \ncontraction. \nThe directory is composed of a directory header D.H, called \nthe ille depth and nd directory elements D1, Dz, . . . , D,,, where \nnd = 2D*R. Each directory element 01, consists of a page pointer \nDi.P and a local depth Di.h. The storage of the local depth as a \ncomponent of the directory element differs from the original de- \nsign in [4] where the local depth is maintained in the data pages. \nStoring the local depth in the diitry allows an immediate \ndeletion of empty pages. The local depth signifies the length of \nthe common preilxes of the keys in a page. Suppose the binary \nbit sequence of a key K = xrzzxs . . . zw. Then the address i \nof the directory entry Di, corresponding to K, is determined by \nthe first H prefix bits of K. This is defined by a function g as \ni=g(K,H) = c ~,2=-~. \nll&R \nThe manner in which the llle expands is illustrated hg \nFigure la. Suppose the key K = \xe2\x80\x9clOlOl...\xe2\x80\x99 is to be inserted \nand the global depth D.H = 2. Using the prefix bits \xe2\x80\x9c10\xe2\x80\x9d we \ndetermine the address g(K, D.H) = 2. The page pointer in 4 \nis given by 4.P = P2, and the local depth at this address is \nD2.h = 1. Assuming the page Pz is full then a third page s will \nbe allocated. The page pointers of the directory elements D2.P \nand Ds.p are set to P2 and PJ respectively. Similarly the local \n101 '
